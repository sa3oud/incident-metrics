{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/incident-metrics/src/components/SystemMetrics.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MetricCard from './MetricCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SystemMetrics = () => {\n  _s();\n  const [metrics, setMetrics] = useState({\n    availability: null,\n    reliability: null,\n    mtbf: null\n  });\n  const calculateSystemAvailability = inputs => {\n    const {\n      totalPeriod,\n      serviceHoursPerDay,\n      preventiveMaintenance,\n      systemUpdates,\n      emergencyMaintenance,\n      unplannedDowntime\n    } = inputs;\n\n    // Calculate service hours and maintenance\n    const serviceHours = totalPeriod / 24 * serviceHoursPerDay;\n    const scheduledMaintenance = preventiveMaintenance + systemUpdates;\n    const actualUptime = serviceHours - scheduledMaintenance - emergencyMaintenance - unplannedDowntime;\n    const requiredUptime = serviceHours - scheduledMaintenance;\n    return actualUptime / requiredUptime * 100;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold text-pink-700 mb-8\",\n      children: \"System Metrics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n      children: /*#__PURE__*/_jsxDEV(MetricCard, {\n        title: \"System Availability\",\n        value: metrics.availability,\n        equation: `System Availability = (Actual Uptime / Required Uptime) × 100%\n\nWhere:\n- Service Hours = (Total Period / 24) × Service Hours per Day\n- Scheduled Maintenance = Preventive + Updates\n- Actual Uptime = Service Hours - Scheduled Maintenance - Emergency Maintenance - Unplanned Downtime\n- Required Uptime = Service Hours - Scheduled Maintenance`,\n        description: \"True system availability considering service hours and all types of maintenance\",\n        inputs: [{\n          name: 'totalPeriod',\n          label: 'Total Time Period (hours)',\n          placeholder: '720',\n          min: 0,\n          hint: 'e.g., 720 for one month'\n        }, {\n          name: 'serviceHoursPerDay',\n          label: 'Service Hours per Day',\n          placeholder: '24',\n          min: 0,\n          max: 24,\n          hint: 'e.g., 24 for 24/7, 8 for business hours'\n        }, {\n          name: 'preventiveMaintenance',\n          label: 'Preventive Maintenance (hours)',\n          placeholder: '8',\n          min: 0,\n          hint: 'Regular planned maintenance'\n        }, {\n          name: 'systemUpdates',\n          label: 'System Updates/Patches (hours)',\n          placeholder: '4',\n          min: 0,\n          hint: 'Planned update windows'\n        }, {\n          name: 'emergencyMaintenance',\n          label: 'Emergency Maintenance (hours)',\n          placeholder: '2',\n          min: 0,\n          hint: 'Urgent but planned fixes'\n        }, {\n          name: 'unplannedDowntime',\n          label: 'Unplanned Downtime (hours)',\n          placeholder: '1',\n          min: 0,\n          hint: 'Complete system outages'\n        }],\n        onCalculate: inputs => {\n          try {\n            if (inputs.totalPeriod <= 0) {\n              throw new Error('Total period must be greater than 0');\n            }\n            if (inputs.serviceHoursPerDay <= 0 || inputs.serviceHoursPerDay > 24) {\n              throw new Error('Service hours per day must be between 1 and 24');\n            }\n            const serviceHours = inputs.totalPeriod / 24 * inputs.serviceHoursPerDay;\n            const totalDowntime = inputs.preventiveMaintenance + inputs.systemUpdates + inputs.emergencyMaintenance + inputs.unplannedDowntime;\n            if (totalDowntime > serviceHours) {\n              throw new Error('Total downtime cannot exceed service hours');\n            }\n            const availability = calculateSystemAvailability(inputs);\n            if (isNaN(availability) || !isFinite(availability)) {\n              throw new Error('Invalid calculation result');\n            }\n            setMetrics(prev => ({\n              ...prev,\n              availability\n            }));\n          } catch (error) {\n            console.error('Calculation error:', error);\n            throw error;\n          }\n        },\n        unit: \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(SystemMetrics, \"Rbi5tsa7w89i3C4yVDFUAIMiYK0=\");\n_c = SystemMetrics;\nexport default SystemMetrics;\nvar _c;\n$RefreshReg$(_c, \"SystemMetrics\");","map":{"version":3,"names":["React","useState","MetricCard","jsxDEV","_jsxDEV","SystemMetrics","_s","metrics","setMetrics","availability","reliability","mtbf","calculateSystemAvailability","inputs","totalPeriod","serviceHoursPerDay","preventiveMaintenance","systemUpdates","emergencyMaintenance","unplannedDowntime","serviceHours","scheduledMaintenance","actualUptime","requiredUptime","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","value","equation","description","name","label","placeholder","min","hint","max","onCalculate","Error","totalDowntime","isNaN","isFinite","prev","error","console","unit","_c","$RefreshReg$"],"sources":["/Users/user/Documents/incident-metrics/src/components/SystemMetrics.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport MetricCard from './MetricCard';\n\nconst SystemMetrics = () => {\n  const [metrics, setMetrics] = useState({\n    availability: null,\n    reliability: null,\n    mtbf: null\n  });\n\n  const calculateSystemAvailability = (inputs) => {\n    const {\n      totalPeriod,\n      serviceHoursPerDay,\n      preventiveMaintenance,\n      systemUpdates,\n      emergencyMaintenance,\n      unplannedDowntime\n    } = inputs;\n\n    // Calculate service hours and maintenance\n    const serviceHours = (totalPeriod / 24) * serviceHoursPerDay;\n    const scheduledMaintenance = preventiveMaintenance + systemUpdates;\n    const actualUptime = serviceHours - scheduledMaintenance - emergencyMaintenance - unplannedDowntime;\n    const requiredUptime = serviceHours - scheduledMaintenance;\n    \n    return (actualUptime / requiredUptime) * 100;\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h1 className=\"text-3xl font-bold text-pink-700 mb-8\">System Metrics</h1>\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <MetricCard\n          title=\"System Availability\"\n          value={metrics.availability}\n          equation={`System Availability = (Actual Uptime / Required Uptime) × 100%\n\nWhere:\n- Service Hours = (Total Period / 24) × Service Hours per Day\n- Scheduled Maintenance = Preventive + Updates\n- Actual Uptime = Service Hours - Scheduled Maintenance - Emergency Maintenance - Unplanned Downtime\n- Required Uptime = Service Hours - Scheduled Maintenance`}\n          description=\"True system availability considering service hours and all types of maintenance\"\n          inputs={[\n            { \n              name: 'totalPeriod', \n              label: 'Total Time Period (hours)', \n              placeholder: '720', \n              min: 0,\n              hint: 'e.g., 720 for one month'\n            },\n            { \n              name: 'serviceHoursPerDay', \n              label: 'Service Hours per Day', \n              placeholder: '24', \n              min: 0,\n              max: 24,\n              hint: 'e.g., 24 for 24/7, 8 for business hours'\n            },\n            { \n              name: 'preventiveMaintenance', \n              label: 'Preventive Maintenance (hours)', \n              placeholder: '8', \n              min: 0,\n              hint: 'Regular planned maintenance'\n            },\n            { \n              name: 'systemUpdates', \n              label: 'System Updates/Patches (hours)', \n              placeholder: '4', \n              min: 0,\n              hint: 'Planned update windows'\n            },\n            { \n              name: 'emergencyMaintenance', \n              label: 'Emergency Maintenance (hours)', \n              placeholder: '2', \n              min: 0,\n              hint: 'Urgent but planned fixes'\n            },\n            { \n              name: 'unplannedDowntime', \n              label: 'Unplanned Downtime (hours)', \n              placeholder: '1', \n              min: 0,\n              hint: 'Complete system outages'\n            }\n          ]}\n          onCalculate={(inputs) => {\n            try {\n              if (inputs.totalPeriod <= 0) {\n                throw new Error('Total period must be greater than 0');\n              }\n              if (inputs.serviceHoursPerDay <= 0 || inputs.serviceHoursPerDay > 24) {\n                throw new Error('Service hours per day must be between 1 and 24');\n              }\n\n              const serviceHours = (inputs.totalPeriod / 24) * inputs.serviceHoursPerDay;\n              const totalDowntime = \n                inputs.preventiveMaintenance + \n                inputs.systemUpdates + \n                inputs.emergencyMaintenance + \n                inputs.unplannedDowntime;\n\n              if (totalDowntime > serviceHours) {\n                throw new Error('Total downtime cannot exceed service hours');\n              }\n\n              const availability = calculateSystemAvailability(inputs);\n              \n              if (isNaN(availability) || !isFinite(availability)) {\n                throw new Error('Invalid calculation result');\n              }\n\n              setMetrics(prev => ({ ...prev, availability }));\n            } catch (error) {\n              console.error('Calculation error:', error);\n              throw error;\n            }\n          }}\n          unit=\"%\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SystemMetrics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}