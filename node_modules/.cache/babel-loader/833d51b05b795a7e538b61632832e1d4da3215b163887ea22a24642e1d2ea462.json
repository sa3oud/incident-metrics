{"ast":null,"code":"import _objectSpread from\"/Users/user/Documents/incident-metrics/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import MetricCard from'./MetricCard';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ApplicationMetrics=()=>{const[metrics,setMetrics]=useState({errorRate:null,responseTime:null,throughput:null});return/*#__PURE__*/_jsxs(\"div\",{className:\"p-8\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-bold text-pink-700 mb-8\",children:\"Application Metrics\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-6\",children:[/*#__PURE__*/_jsx(MetricCard,{title:\"Error Rate\",value:metrics.errorRate,equation:\"(Errors / Total Requests) \\xD7 100%\",description:\"Percentage of failed requests\",inputs:[{name:'errors',label:'Number of Errors',placeholder:'50',min:0},{name:'totalRequests',label:'Total Requests',placeholder:'1000',min:0}],onCalculate:inputs=>{const rate=inputs.errors/inputs.totalRequests*100;setMetrics(prev=>_objectSpread(_objectSpread({},prev),{},{errorRate:rate}));},unit:\"%\"}),/*#__PURE__*/_jsx(MetricCard,{title:\"Response Time\",value:metrics.responseTime,equation:\"Total Response Time / Number of Requests\",description:\"Average time to process requests\",inputs:[{name:'totalTime',label:'Total Response Time (ms)',placeholder:'5000',min:0},{name:'requests',label:'Number of Requests',placeholder:'100',min:0}],onCalculate:inputs=>{const avgTime=inputs.totalTime/inputs.requests;setMetrics(prev=>_objectSpread(_objectSpread({},prev),{},{responseTime:avgTime}));},unit:\" ms\"}),/*#__PURE__*/_jsx(MetricCard,{title:\"Throughput\",value:metrics.throughput,equation:\"Successful Requests / Time Period\",description:\"Request processing rate\",inputs:[{name:'successfulRequests',label:'Successful Requests',placeholder:'950',min:0},{name:'timePeriod',label:'Time Period (seconds)',placeholder:'60',min:0}],onCalculate:inputs=>{const throughput=inputs.successfulRequests/inputs.timePeriod;setMetrics(prev=>_objectSpread(_objectSpread({},prev),{},{throughput:throughput}));},unit:\" req/s\"})]})]});};export default ApplicationMetrics;","map":{"version":3,"names":["React","useState","MetricCard","jsx","_jsx","jsxs","_jsxs","ApplicationMetrics","metrics","setMetrics","errorRate","responseTime","throughput","className","children","title","value","equation","description","inputs","name","label","placeholder","min","onCalculate","rate","errors","totalRequests","prev","_objectSpread","unit","avgTime","totalTime","requests","successfulRequests","timePeriod"],"sources":["/Users/user/Documents/incident-metrics/src/components/ApplicationMetrics.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport MetricCard from './MetricCard';\n\nconst ApplicationMetrics = () => {\n  const [metrics, setMetrics] = useState({\n    errorRate: null,\n    responseTime: null,\n    throughput: null\n  });\n\n  return (\n    <div className=\"p-8\">\n      <h1 className=\"text-3xl font-bold text-pink-700 mb-8\">Application Metrics</h1>\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <MetricCard\n          title=\"Error Rate\"\n          value={metrics.errorRate}\n          equation=\"(Errors / Total Requests) Ã— 100%\"\n          description=\"Percentage of failed requests\"\n          inputs={[\n            { name: 'errors', label: 'Number of Errors', placeholder: '50', min: 0 },\n            { name: 'totalRequests', label: 'Total Requests', placeholder: '1000', min: 0 }\n          ]}\n          onCalculate={(inputs) => {\n            const rate = (inputs.errors / inputs.totalRequests) * 100;\n            setMetrics(prev => ({ ...prev, errorRate: rate }));\n          }}\n          unit=\"%\"\n        />\n\n        <MetricCard\n          title=\"Response Time\"\n          value={metrics.responseTime}\n          equation=\"Total Response Time / Number of Requests\"\n          description=\"Average time to process requests\"\n          inputs={[\n            { name: 'totalTime', label: 'Total Response Time (ms)', placeholder: '5000', min: 0 },\n            { name: 'requests', label: 'Number of Requests', placeholder: '100', min: 0 }\n          ]}\n          onCalculate={(inputs) => {\n            const avgTime = inputs.totalTime / inputs.requests;\n            setMetrics(prev => ({ ...prev, responseTime: avgTime }));\n          }}\n          unit=\" ms\"\n        />\n\n        <MetricCard\n          title=\"Throughput\"\n          value={metrics.throughput}\n          equation=\"Successful Requests / Time Period\"\n          description=\"Request processing rate\"\n          inputs={[\n            { name: 'successfulRequests', label: 'Successful Requests', placeholder: '950', min: 0 },\n            { name: 'timePeriod', label: 'Time Period (seconds)', placeholder: '60', min: 0 }\n          ]}\n          onCalculate={(inputs) => {\n            const throughput = inputs.successfulRequests / inputs.timePeriod;\n            setMetrics(prev => ({ ...prev, throughput: throughput }));\n          }}\n          unit=\" req/s\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ApplicationMetrics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}