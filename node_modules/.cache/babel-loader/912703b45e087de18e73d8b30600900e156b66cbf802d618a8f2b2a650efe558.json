{"ast":null,"code":"import _objectSpread from\"/Users/user/Documents/incident-metrics/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import MetricCard from'./MetricCard';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SystemMetrics=()=>{const[metrics,setMetrics]=useState({availability:null,reliability:null,mtbf:null});const calculateSystemAvailability=inputs=>{const{totalPeriod,serviceHoursPerDay,preventiveMaintenance,systemUpdates,emergencyMaintenance,unplannedDowntime}=inputs;// Calculate service hours and maintenance\nconst serviceHours=totalPeriod/24*serviceHoursPerDay;const scheduledMaintenance=preventiveMaintenance+systemUpdates;const actualUptime=serviceHours-scheduledMaintenance-emergencyMaintenance-unplannedDowntime;const requiredUptime=serviceHours-scheduledMaintenance;return actualUptime/requiredUptime*100;};return/*#__PURE__*/_jsxs(\"div\",{className:\"p-8\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-bold text-pink-700 mb-8\",children:\"System Metrics\"}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-6\",children:/*#__PURE__*/_jsx(MetricCard,{title:\"System Availability\",value:metrics.availability,equation:\"System Availability = (Actual Uptime / Required Uptime) \\xD7 100%\\n\\nWhere:\\n- Service Hours = (Total Period / 24) \\xD7 Service Hours per Day\\n- Scheduled Maintenance = Preventive + Updates\\n- Actual Uptime = Service Hours - Scheduled Maintenance - Emergency Maintenance - Unplanned Downtime\\n- Required Uptime = Service Hours - Scheduled Maintenance\",description:\"True system availability considering service hours and all types of maintenance\",inputs:[{name:'totalPeriod',label:'Total Time Period (hours)',placeholder:'720',min:0,hint:'e.g., 720 for one month'},{name:'serviceHoursPerDay',label:'Service Hours per Day',placeholder:'24',min:0,max:24,hint:'e.g., 24 for 24/7, 8 for business hours'},{name:'preventiveMaintenance',label:'Preventive Maintenance (hours)',placeholder:'8',min:0,hint:'Regular planned maintenance'},{name:'systemUpdates',label:'System Updates/Patches (hours)',placeholder:'4',min:0,hint:'Planned update windows'},{name:'emergencyMaintenance',label:'Emergency Maintenance (hours)',placeholder:'2',min:0,hint:'Urgent but planned fixes'},{name:'unplannedDowntime',label:'Unplanned Downtime (hours)',placeholder:'1',min:0,hint:'Complete system outages'}],onCalculate:inputs=>{try{if(inputs.totalPeriod<=0){throw new Error('Total period must be greater than 0');}if(inputs.serviceHoursPerDay<=0||inputs.serviceHoursPerDay>24){throw new Error('Service hours per day must be between 1 and 24');}const serviceHours=inputs.totalPeriod/24*inputs.serviceHoursPerDay;const totalDowntime=inputs.preventiveMaintenance+inputs.systemUpdates+inputs.emergencyMaintenance+inputs.unplannedDowntime;if(totalDowntime>serviceHours){throw new Error('Total downtime cannot exceed service hours');}const availability=calculateSystemAvailability(inputs);if(isNaN(availability)||!isFinite(availability)){throw new Error('Invalid calculation result');}setMetrics(prev=>_objectSpread(_objectSpread({},prev),{},{availability}));}catch(error){console.error('Calculation error:',error);throw error;}},unit:\"%\"})})]});};export default SystemMetrics;","map":{"version":3,"names":["React","useState","MetricCard","jsx","_jsx","jsxs","_jsxs","SystemMetrics","metrics","setMetrics","availability","reliability","mtbf","calculateSystemAvailability","inputs","totalPeriod","serviceHoursPerDay","preventiveMaintenance","systemUpdates","emergencyMaintenance","unplannedDowntime","serviceHours","scheduledMaintenance","actualUptime","requiredUptime","className","children","title","value","equation","description","name","label","placeholder","min","hint","max","onCalculate","Error","totalDowntime","isNaN","isFinite","prev","_objectSpread","error","console","unit"],"sources":["/Users/user/Documents/incident-metrics/src/components/SystemMetrics.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport MetricCard from './MetricCard';\n\nconst SystemMetrics = () => {\n  const [metrics, setMetrics] = useState({\n    availability: null,\n    reliability: null,\n    mtbf: null\n  });\n\n  const calculateSystemAvailability = (inputs) => {\n    const {\n      totalPeriod,\n      serviceHoursPerDay,\n      preventiveMaintenance,\n      systemUpdates,\n      emergencyMaintenance,\n      unplannedDowntime\n    } = inputs;\n\n    // Calculate service hours and maintenance\n    const serviceHours = (totalPeriod / 24) * serviceHoursPerDay;\n    const scheduledMaintenance = preventiveMaintenance + systemUpdates;\n    const actualUptime = serviceHours - scheduledMaintenance - emergencyMaintenance - unplannedDowntime;\n    const requiredUptime = serviceHours - scheduledMaintenance;\n    \n    return (actualUptime / requiredUptime) * 100;\n  };\n\n  return (\n    <div className=\"p-8\">\n      <h1 className=\"text-3xl font-bold text-pink-700 mb-8\">System Metrics</h1>\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <MetricCard\n          title=\"System Availability\"\n          value={metrics.availability}\n          equation={`System Availability = (Actual Uptime / Required Uptime) × 100%\n\nWhere:\n- Service Hours = (Total Period / 24) × Service Hours per Day\n- Scheduled Maintenance = Preventive + Updates\n- Actual Uptime = Service Hours - Scheduled Maintenance - Emergency Maintenance - Unplanned Downtime\n- Required Uptime = Service Hours - Scheduled Maintenance`}\n          description=\"True system availability considering service hours and all types of maintenance\"\n          inputs={[\n            { \n              name: 'totalPeriod', \n              label: 'Total Time Period (hours)', \n              placeholder: '720', \n              min: 0,\n              hint: 'e.g., 720 for one month'\n            },\n            { \n              name: 'serviceHoursPerDay', \n              label: 'Service Hours per Day', \n              placeholder: '24', \n              min: 0,\n              max: 24,\n              hint: 'e.g., 24 for 24/7, 8 for business hours'\n            },\n            { \n              name: 'preventiveMaintenance', \n              label: 'Preventive Maintenance (hours)', \n              placeholder: '8', \n              min: 0,\n              hint: 'Regular planned maintenance'\n            },\n            { \n              name: 'systemUpdates', \n              label: 'System Updates/Patches (hours)', \n              placeholder: '4', \n              min: 0,\n              hint: 'Planned update windows'\n            },\n            { \n              name: 'emergencyMaintenance', \n              label: 'Emergency Maintenance (hours)', \n              placeholder: '2', \n              min: 0,\n              hint: 'Urgent but planned fixes'\n            },\n            { \n              name: 'unplannedDowntime', \n              label: 'Unplanned Downtime (hours)', \n              placeholder: '1', \n              min: 0,\n              hint: 'Complete system outages'\n            }\n          ]}\n          onCalculate={(inputs) => {\n            try {\n              if (inputs.totalPeriod <= 0) {\n                throw new Error('Total period must be greater than 0');\n              }\n              if (inputs.serviceHoursPerDay <= 0 || inputs.serviceHoursPerDay > 24) {\n                throw new Error('Service hours per day must be between 1 and 24');\n              }\n\n              const serviceHours = (inputs.totalPeriod / 24) * inputs.serviceHoursPerDay;\n              const totalDowntime = \n                inputs.preventiveMaintenance + \n                inputs.systemUpdates + \n                inputs.emergencyMaintenance + \n                inputs.unplannedDowntime;\n\n              if (totalDowntime > serviceHours) {\n                throw new Error('Total downtime cannot exceed service hours');\n              }\n\n              const availability = calculateSystemAvailability(inputs);\n              \n              if (isNaN(availability) || !isFinite(availability)) {\n                throw new Error('Invalid calculation result');\n              }\n\n              setMetrics(prev => ({ ...prev, availability }));\n            } catch (error) {\n              console.error('Calculation error:', error);\n              throw error;\n            }\n          }}\n          unit=\"%\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SystemMetrics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}