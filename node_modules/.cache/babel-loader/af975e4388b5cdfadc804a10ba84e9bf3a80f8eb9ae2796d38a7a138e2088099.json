{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/incident-metrics/src/components/ApplicationMetrics.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MetricCard from './MetricCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApplicationMetrics = () => {\n  _s();\n  const [metrics, setMetrics] = useState({\n    errorRate: null,\n    responseTime: null,\n    throughput: null\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold text-pink-700 mb-8\",\n      children: \"Application Metrics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(MetricCard, {\n        title: \"Error Rate\",\n        value: metrics.errorRate,\n        equation: \"(Errors / Total Requests) \\xD7 100%\",\n        description: \"Percentage of failed requests\",\n        inputs: [{\n          name: 'errors',\n          label: 'Number of Errors',\n          placeholder: '50',\n          min: 0\n        }, {\n          name: 'totalRequests',\n          label: 'Total Requests',\n          placeholder: '1000',\n          min: 0\n        }],\n        onCalculate: inputs => {\n          const rate = inputs.errors / inputs.totalRequests * 100;\n          setMetrics(prev => ({\n            ...prev,\n            errorRate: rate\n          }));\n        },\n        unit: \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        title: \"Response Time\",\n        value: metrics.responseTime,\n        equation: \"Total Response Time / Number of Requests\",\n        description: \"Average time to process requests\",\n        inputs: [{\n          name: 'totalTime',\n          label: 'Total Response Time (ms)',\n          placeholder: '5000',\n          min: 0\n        }, {\n          name: 'requests',\n          label: 'Number of Requests',\n          placeholder: '100',\n          min: 0\n        }],\n        onCalculate: inputs => {\n          const avgTime = inputs.totalTime / inputs.requests;\n          setMetrics(prev => ({\n            ...prev,\n            responseTime: avgTime\n          }));\n        },\n        unit: \" ms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MetricCard, {\n        title: \"Throughput\",\n        value: metrics.throughput,\n        equation: \"Successful Requests / Time Period\",\n        description: \"Request processing rate\",\n        inputs: [{\n          name: 'successfulRequests',\n          label: 'Successful Requests',\n          placeholder: '950',\n          min: 0\n        }, {\n          name: 'timePeriod',\n          label: 'Time Period (seconds)',\n          placeholder: '60',\n          min: 0\n        }],\n        onCalculate: inputs => {\n          const throughput = inputs.successfulRequests / inputs.timePeriod;\n          setMetrics(prev => ({\n            ...prev,\n            throughput: throughput\n          }));\n        },\n        unit: \" req/s\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_s(ApplicationMetrics, \"38h5Fm0XDj/ygUUGCafrmtvCHoA=\");\n_c = ApplicationMetrics;\nexport default ApplicationMetrics;\nvar _c;\n$RefreshReg$(_c, \"ApplicationMetrics\");","map":{"version":3,"names":["React","useState","MetricCard","jsxDEV","_jsxDEV","ApplicationMetrics","_s","metrics","setMetrics","errorRate","responseTime","throughput","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","value","equation","description","inputs","name","label","placeholder","min","onCalculate","rate","errors","totalRequests","prev","unit","avgTime","totalTime","requests","successfulRequests","timePeriod","_c","$RefreshReg$"],"sources":["/Users/user/Documents/incident-metrics/src/components/ApplicationMetrics.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport MetricCard from './MetricCard';\n\nconst ApplicationMetrics = () => {\n  const [metrics, setMetrics] = useState({\n    errorRate: null,\n    responseTime: null,\n    throughput: null\n  });\n\n  return (\n    <div className=\"p-8\">\n      <h1 className=\"text-3xl font-bold text-pink-700 mb-8\">Application Metrics</h1>\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <MetricCard\n          title=\"Error Rate\"\n          value={metrics.errorRate}\n          equation=\"(Errors / Total Requests) Ã— 100%\"\n          description=\"Percentage of failed requests\"\n          inputs={[\n            { name: 'errors', label: 'Number of Errors', placeholder: '50', min: 0 },\n            { name: 'totalRequests', label: 'Total Requests', placeholder: '1000', min: 0 }\n          ]}\n          onCalculate={(inputs) => {\n            const rate = (inputs.errors / inputs.totalRequests) * 100;\n            setMetrics(prev => ({ ...prev, errorRate: rate }));\n          }}\n          unit=\"%\"\n        />\n\n        <MetricCard\n          title=\"Response Time\"\n          value={metrics.responseTime}\n          equation=\"Total Response Time / Number of Requests\"\n          description=\"Average time to process requests\"\n          inputs={[\n            { name: 'totalTime', label: 'Total Response Time (ms)', placeholder: '5000', min: 0 },\n            { name: 'requests', label: 'Number of Requests', placeholder: '100', min: 0 }\n          ]}\n          onCalculate={(inputs) => {\n            const avgTime = inputs.totalTime / inputs.requests;\n            setMetrics(prev => ({ ...prev, responseTime: avgTime }));\n          }}\n          unit=\" ms\"\n        />\n\n        <MetricCard\n          title=\"Throughput\"\n          value={metrics.throughput}\n          equation=\"Successful Requests / Time Period\"\n          description=\"Request processing rate\"\n          inputs={[\n            { name: 'successfulRequests', label: 'Successful Requests', placeholder: '950', min: 0 },\n            { name: 'timePeriod', label: 'Time Period (seconds)', placeholder: '60', min: 0 }\n          ]}\n          onCalculate={(inputs) => {\n            const throughput = inputs.successfulRequests / inputs.timePeriod;\n            setMetrics(prev => ({ ...prev, throughput: throughput }));\n          }}\n          unit=\" req/s\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ApplicationMetrics;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}